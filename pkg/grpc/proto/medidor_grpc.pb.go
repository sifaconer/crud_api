// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: medidor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MedidorServicesClient is the client API for MedidorServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MedidorServicesClient interface {
	Create(ctx context.Context, in *Medidor, opts ...grpc.CallOption) (*ResponseMedidor, error)
	Update(ctx context.Context, in *Medidor, opts ...grpc.CallOption) (*ResponseMedidor, error)
	Delete(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Empty, error)
	All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayMedidor, error)
	ByID(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*ResponseMedidor, error)
	RecentInstallation(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*ResponseMedidor, error)
	Inactive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayMedidor, error)
}

type medidorServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewMedidorServicesClient(cc grpc.ClientConnInterface) MedidorServicesClient {
	return &medidorServicesClient{cc}
}

func (c *medidorServicesClient) Create(ctx context.Context, in *Medidor, opts ...grpc.CallOption) (*ResponseMedidor, error) {
	out := new(ResponseMedidor)
	err := c.cc.Invoke(ctx, "/proto.MedidorServices/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medidorServicesClient) Update(ctx context.Context, in *Medidor, opts ...grpc.CallOption) (*ResponseMedidor, error) {
	out := new(ResponseMedidor)
	err := c.cc.Invoke(ctx, "/proto.MedidorServices/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medidorServicesClient) Delete(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.MedidorServices/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medidorServicesClient) All(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayMedidor, error) {
	out := new(ArrayMedidor)
	err := c.cc.Invoke(ctx, "/proto.MedidorServices/All", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medidorServicesClient) ByID(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*ResponseMedidor, error) {
	out := new(ResponseMedidor)
	err := c.cc.Invoke(ctx, "/proto.MedidorServices/ByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medidorServicesClient) RecentInstallation(ctx context.Context, in *Serial, opts ...grpc.CallOption) (*ResponseMedidor, error) {
	out := new(ResponseMedidor)
	err := c.cc.Invoke(ctx, "/proto.MedidorServices/RecentInstallation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *medidorServicesClient) Inactive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArrayMedidor, error) {
	out := new(ArrayMedidor)
	err := c.cc.Invoke(ctx, "/proto.MedidorServices/Inactive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MedidorServicesServer is the server API for MedidorServices service.
// All implementations must embed UnimplementedMedidorServicesServer
// for forward compatibility
type MedidorServicesServer interface {
	Create(context.Context, *Medidor) (*ResponseMedidor, error)
	Update(context.Context, *Medidor) (*ResponseMedidor, error)
	Delete(context.Context, *UUID) (*Empty, error)
	All(context.Context, *Empty) (*ArrayMedidor, error)
	ByID(context.Context, *UUID) (*ResponseMedidor, error)
	RecentInstallation(context.Context, *Serial) (*ResponseMedidor, error)
	Inactive(context.Context, *Empty) (*ArrayMedidor, error)
	mustEmbedUnimplementedMedidorServicesServer()
}

// UnimplementedMedidorServicesServer must be embedded to have forward compatible implementations.
type UnimplementedMedidorServicesServer struct {
}

func (UnimplementedMedidorServicesServer) Create(context.Context, *Medidor) (*ResponseMedidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMedidorServicesServer) Update(context.Context, *Medidor) (*ResponseMedidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMedidorServicesServer) Delete(context.Context, *UUID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMedidorServicesServer) All(context.Context, *Empty) (*ArrayMedidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method All not implemented")
}
func (UnimplementedMedidorServicesServer) ByID(context.Context, *UUID) (*ResponseMedidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ByID not implemented")
}
func (UnimplementedMedidorServicesServer) RecentInstallation(context.Context, *Serial) (*ResponseMedidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecentInstallation not implemented")
}
func (UnimplementedMedidorServicesServer) Inactive(context.Context, *Empty) (*ArrayMedidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inactive not implemented")
}
func (UnimplementedMedidorServicesServer) mustEmbedUnimplementedMedidorServicesServer() {}

// UnsafeMedidorServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MedidorServicesServer will
// result in compilation errors.
type UnsafeMedidorServicesServer interface {
	mustEmbedUnimplementedMedidorServicesServer()
}

func RegisterMedidorServicesServer(s grpc.ServiceRegistrar, srv MedidorServicesServer) {
	s.RegisterService(&MedidorServices_ServiceDesc, srv)
}

func _MedidorServices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Medidor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedidorServicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MedidorServices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedidorServicesServer).Create(ctx, req.(*Medidor))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedidorServices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Medidor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedidorServicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MedidorServices/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedidorServicesServer).Update(ctx, req.(*Medidor))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedidorServices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedidorServicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MedidorServices/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedidorServicesServer).Delete(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedidorServices_All_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedidorServicesServer).All(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MedidorServices/All",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedidorServicesServer).All(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedidorServices_ByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedidorServicesServer).ByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MedidorServices/ByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedidorServicesServer).ByID(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedidorServices_RecentInstallation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Serial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedidorServicesServer).RecentInstallation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MedidorServices/RecentInstallation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedidorServicesServer).RecentInstallation(ctx, req.(*Serial))
	}
	return interceptor(ctx, in, info, handler)
}

func _MedidorServices_Inactive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MedidorServicesServer).Inactive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MedidorServices/Inactive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MedidorServicesServer).Inactive(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MedidorServices_ServiceDesc is the grpc.ServiceDesc for MedidorServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MedidorServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MedidorServices",
	HandlerType: (*MedidorServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MedidorServices_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MedidorServices_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MedidorServices_Delete_Handler,
		},
		{
			MethodName: "All",
			Handler:    _MedidorServices_All_Handler,
		},
		{
			MethodName: "ByID",
			Handler:    _MedidorServices_ByID_Handler,
		},
		{
			MethodName: "RecentInstallation",
			Handler:    _MedidorServices_RecentInstallation_Handler,
		},
		{
			MethodName: "Inactive",
			Handler:    _MedidorServices_Inactive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "medidor.proto",
}
